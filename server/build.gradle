/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

buildscript {

    dependencies {
        classpath "com.netflix.nebula:gradle-ospackage-plugin:2.2.6"
        classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
    }
}

plugins {
    id "de.undercouch.download" version "3.4.3"
}

repositories {
    // mavenCentral without https:
    maven {
        url 'http://repo1.maven.org/maven2'
    }
    mavenLocal()
    jcenter {
        url 'http://jcenter.bintray.com/'
    }
    maven {
        url 'http://repository.jboss.org/nexus/content/groups/public'
    }
}

// Get database property, use GPDB as a default database
def database = System.getProperty("database", "gpdb");
def databaseFileName = "gradle/profiles/" + database + ".properties";
assert file(databaseFileName).exists()
def databaseProperties = new Properties()
file(databaseFileName).withInputStream { databaseProperties.load(it) }

subprojects { subProject ->
    group = 'org.greenplum.pxf'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'os-package'
    apply plugin: 'maven-publish'

    compileJava.options*.compilerArgs = [
            "-g", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile", "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty",
            "-Xlint:finally", "-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static", "-Xlint:try",
            "-Xlint:fallthrough", "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:-options", "-Werror"
    ]

    compileTestJava.options*.compilerArgs = [
            "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile", "-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty",
            "-Xlint:finally", "-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static", "-Xlint:try",
            "-Xlint:fallthrough", "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:-options"
    ]

    // Add LICENSE and NOTICE to generated jar files.
    sourceSets {
        main {
            resources {
                srcDir '../../'
                include 'NOTICE'
            }
            resources {
                srcDir '../../'
                include 'LICENSE'
            }
        }
    }

    repositories {
        // mavenCentral without https:
        maven { url 'http://repo1.maven.org/maven2' }
        mavenLocal()
        maven { url 'http://repo.hortonworks.com/content/repositories/releases/'}
    }

    dependencies {
        testCompile 'junit:junit:4.11'
        testCompile 'org.powermock:powermock-core:1.5.1'
        testCompile 'org.powermock:powermock-module-junit4:1.5.1'
        testCompile 'org.powermock:powermock-api-mockito:1.5.1'
        testCompile 'org.mockito:mockito-core:1.9.5'
    }

    configurations.all {
        resolutionStrategy {
            // force versions that were specified in dependencies:
            // hbase/hive has a different versions than other hadoop components
            force 'commons-codec:commons-codec:1.4'
            force 'commons-collections:commons-collections:3.2.1'
            force 'commons-logging:commons-logging:1.1.3'
            force 'org.apache.avro:avro:1.7.4'
            force 'org.apache.zookeeper:zookeeper:3.4.6'
            force 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
            force 'junit:junit:4.11'
            force "com.google.guava:guava:11.0.2" // because this version ships with HDP-2.5.3
            force "com.google.code.gson:gson:2.8.2" // because HDP ships with an older version, but Ignite expects 2.8.2

        }
    }

    configurations {
        bundleJars.extendsFrom runtime
    }

    configurations.bundleJars {
        transitive = false
    }

    task copyRuntimeDependencies(type: Copy) {
        delete "$buildDir/libs-shared"
        into "$buildDir/libs-shared"
        from configurations.bundleJars {
            // providedCompile is a war plugin specific thing to exclude in war.
            // We have to exclude tomcat explicitly
            exclude 'tomcat-catalina-*'
        }
    }
}

project('pxf') {
    jar.enabled = false
    dependencies {
        bundleJars "com.fasterxml.jackson.core:jackson-core:2.6.7"
        bundleJars "com.fasterxml.jackson.core:jackson-databind:2.6.7.1"
        bundleJars "com.fasterxml.jackson.core:jackson-annotations:2.6.0"
        bundleJars "org.apache.httpcomponents:httpclient:4.5.2"
        bundleJars "org.apache.httpcomponents:httpcore:4.4.4"
        bundleJars "org.apache.hadoop:hadoop-aws:2.8.5"
        bundleJars "com.amazonaws:aws-java-sdk-core:$awsJavaSdk"
        bundleJars "com.amazonaws:aws-java-sdk-kms:$awsJavaSdk"
        bundleJars "com.amazonaws:aws-java-sdk-s3:$awsJavaSdk"
        bundleJars "org.apache.hadoop:hadoop-azure-datalake:3.0.0-alpha2"
        bundleJars "com.microsoft.azure:azure-data-lake-store-sdk:2.0.11"
        bundleJars "com.google.cloud.bigdataoss:gcs-connector:hadoop2-1.9.7"
    }
}

project('pxf-api') {
    dependencies {
        compile "commons-lang:commons-lang:2.6"
        compile "org.codehaus.jackson:jackson-mapper-asl:1.9.13"
        compile "commons-logging:commons-logging:1.1.3"
        compile "commons-collections:commons-collections:3.2.2"
        compile "commons-configuration:commons-configuration:1.6"
        compile "commons-codec:commons-codec:1.4"
        compile "com.sun.jersey:jersey-core:1.9"

        bundleJars "org.codehaus.jackson:jackson-core-asl:1.9.13"
        bundleJars "asm:asm:3.2"
    }
}

task jar(type: Copy, dependsOn: [subprojects.build]) {
    into 'build'
    subprojects { subProject ->
        from("${project.name}/build/libs") { into 'libs' }
    }
}

project('pxf-service') {
    apply plugin: 'war'
    tasks.war {
        archiveName = 'pxf.war'
        processResources {
            filesMatching('**/pxf-*') {
                details ->
                    details.exclude()
            }
        }
    }
    dependencies {
        providedCompile(project(':pxf-api'))
        providedCompile "org.apache.hadoop:hadoop-common:$hadoopVersion"
        providedCompile "org.apache.hadoop:hadoop-hdfs:$hadoopVersion"
        providedCompile "org.apache.tomcat:tomcat-catalina:$tomcatVersion"

        bundleJars "org.apache.hadoop:hadoop-auth:$hadoopVersion"
        bundleJars "commons-cli:commons-cli:1.2"
        bundleJars "commons-io:commons-io:2.4"
        bundleJars "com.google.guava:guava:11.0.2"
        bundleJars "org.mortbay.jetty:jetty:6.1.26"
        bundleJars "org.mortbay.jetty:jetty-util:6.1.26"
        bundleJars "com.sun.jersey:jersey-server:1.9"
        bundleJars "log4j:log4j:1.2.17"
        bundleJars "com.google.protobuf:protobuf-java:2.5.0"
        bundleJars "org.slf4j:slf4j-api:1.7.10"
    }
}

project('pxf-hdfs') {
    dependencies {
        compile(project(':pxf-api'))
        compile "org.apache.avro:avro-mapred:1.7.4"
        compile "org.apache.hadoop:hadoop-mapreduce-client-core:$hadoopVersion"
        compile "org.apache.hadoop:hadoop-common:$hadoopVersion"
        compile "org.apache.hadoop:hadoop-hdfs:$hadoopVersion"
        compile "org.apache.parquet:parquet-hadoop-bundle:$parquetVersion"

        bundleJars "org.apache.avro:avro:1.7.4"
    }
}

project('pxf-hive') {
    dependencies {
        compile(project(':pxf-hdfs'))
        compile("org.apache.hive:hive-exec:$hiveVersion") {
            exclude module: 'calcite-core'
            exclude module: 'calcite-avatica'
        }
        bundleJars "org.apache.hive:hive-metastore:$hiveVersion"
        bundleJars "org.apache.hive:hive-serde:$hiveVersion"
        bundleJars "org.apache.thrift:libfb303:0.9.3"
        bundleJars "org.antlr:antlr-runtime:3.4"
        bundleJars "org.datanucleus:datanucleus-api-jdo:4.2.1"
        bundleJars "org.datanucleus:datanucleus-core:4.1.6"
        bundleJars "org.xerial.snappy:snappy-java:1.0.5"
        bundleJars "javax.jdo:jdo-api:3.0.1"
    }
}

project('pxf-json') {
    dependencies {
      compile(project(':pxf-hdfs'))
      compile(project(':pxf-api'))
      testCompile 'pl.pragmatists:JUnitParams:1.0.2'
    }

    task create_tweets_tgz(type: Exec){
      commandLine 'tar', '-zcf', 'src/test/resources/tweets.tar.gz', '-C', 'src/test/resources', 'tweets-pp.json'
    }

    tasks['test'].dependsOn('create_tweets_tgz')
}

project('pxf-hbase') {
    dependencies {
        compile(project(':pxf-api'))
        compile "org.apache.hbase:hbase-client:$hbaseVersionJar"

        bundleJars "org.apache.hbase:hbase-common:$hbaseVersionJar"
        bundleJars "org.apache.hbase:hbase-protocol:$hbaseVersionJar"
        bundleJars "org.apache.htrace:htrace-core:3.1.0-incubating"
        bundleJars "io.netty:netty-all:4.0.23.Final"
        bundleJars "org.apache.zookeeper:zookeeper:3.4.6"
        bundleJars "com.yammer.metrics:metrics-core:2.2.0"
    }
}

project('pxf-jdbc') {
    dependencies {
        compile(project(':pxf-api'))

        bundleJars "postgresql:postgresql:8.4-702.jdbc4"
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
}

project('pxf-ignite') {
    dependencies {
        compile(project(':pxf-api'))
        compile "com.google.code.gson:gson:2.8.2"
        compile "org.apache.commons:commons-compress:1.16.1"
    }
}


wrapper {
    gradleVersion = '4.9'
}


// tomcat
def tomcatName = "apache-tomcat-${tomcatVersion}"
def tomcatTargetDir = "tomcat/build"

task tomcatGet << {

    def TarGzSuffix = ".tar.gz"
    def tomcatTar = "${tomcatName}${TarGzSuffix}"
    def tomcatUrl = "http://archive.apache.org/dist/tomcat/tomcat-7/v${tomcatVersion}/bin/${tomcatTar}"

    if (file("${tomcatTargetDir}/${tomcatName}").exists()) {
        println "${tomcatName} already exists, nothing to do"
        return 0
    }

    println "About to download from ${tomcatUrl}..."
    // download tar ball
    download {
        src tomcatUrl
        dest "${tomcatTargetDir}/${tomcatTar}"
    }
    // extract tar ball
    println "Extracting..."
    copy {
        from tarTree(resources.gzip("${tomcatTargetDir}/${tomcatTar}"))
        into tomcatTargetDir
    }
}

task assemble(type: Copy, dependsOn: [subprojects.jar, project(':pxf-service').war, subprojects.copyRuntimeDependencies, tomcatGet])  {
    into "build/stage"
    subprojects { project ->
        from("${project.name}/build/libs") { into 'lib' }
        from("${project.name}/build/libs-shared") { into 'lib/shared' }
    }

    from("pxf-service/src/scripts/pxf-service") {
        into 'bin'
        fileMode 0755
        rename('pxf-service', 'pxf')
        filter(ReplaceTokens,
                tokens: [
                        'pxfPortNum'    : databaseProperties.pxfPortNum,
                        'pxfDefaultUser': (databaseProperties.pxfDefaultUser == null ? "" : databaseProperties.pxfDefaultUser)])
    }

    from("${tomcatTargetDir}/${tomcatName}") { into 'apache-tomcat' }
    from("pxf-service/src/main/resources") { into 'conf' }
    from("pxf-service/src/configs") { include '*-site.xml' into 'conf' }
    from("pxf-service/src/scripts/pxf-env.sh") {
        filter(ReplaceTokens,
                tokens: ['pxfLogDir'     : databaseProperties.pxfLogDir,
                         'pxfRunDir'     : databaseProperties.pxfRunDir,
                         'pxfPortNum'    : databaseProperties.pxfPortNum,
                         'pxfDefaultUser': (databaseProperties.pxfDefaultUser == null ? "" : databaseProperties.pxfDefaultUser),
                         'pxfDefaultUserImpersonation': (databaseProperties.pxfDefaultUserImpersonation == null ? "" : databaseProperties.pxfDefaultUserImpersonation)]) into 'conf'
    }
    from("pxf-service/src/configs/tomcat") { into 'tomcat-templates' }
    from("pxf-service/src/configs/templates") { into 'conf-templates' }
}

task tar(type: Tar, dependsOn: [assemble]) {
    baseName = "${project.name}"
    compression = Compression.GZIP
    extension = 'tar.gz'
    destinationDir = file("${buildDir}/dist")
    from assemble.outputs.files
}

task install (type: Copy, dependsOn: [tar]) {
    from tarTree(file("${buildDir}/dist/pxf.tar.gz"))
    into System.properties['deployPath']
}

buildDir = '.'
apply plugin: 'nebula-aggregate-javadocs'
